#include <PID_v1_bc.h>
#include <dht.h>
#include <IRremote.hpp>
#include <Arduino.h>
#include "PinDefinitionsAndMore.h"

#define DHTPIN 2
#define DHTTYPE DHT22
#define IR_SEND_PIN 3




dht DHT;

double Setpoint = 20.0;
double Input;
double coolingOutput;
double heatingOutput;



double KpCooling = 1.9, KiCooling = 4.7, KdCooling = 1.4;
PID coolingPID(&Input, &coolingOutput, &Setpoint, KpCooling, KiCooling, KdCooling, DIRECT);

double KpHeating = 1.7, KiHeating = 4.0, KdHeating = 1.4;
PID heatingPID(&Input, &heatingOutput, &Setpoint, KpHeating, KiHeating, KdHeating, REVERSE);

const uint16_t rawData_ON[] = {9092, 4400, 752, 1556, 740, 464, 716, 492, 708, 1604, 680, 1656, 652, 556, 652, 556, 648, 560, 648, 556, 652, 556, 652, 1660, 652, 556,
 648, 560, 648, 556, 652, 556, 652, 556, 652, 556, 652, 556, 652, 556, 648, 560, 648, 560, 648, 556, 652, 1660, 648, 560, 648, 556, 652, 556, 648, 560, 648, 560, 648,
  1660, 652, 556, 648, 1664, 624, 584, 624, 584, 624, 1684, 624, 584, 624, 20032, 652, 556, 648, 556, 656, 552, 652, 556, 652, 556, 652, 556, 652, 552, 652, 560, 652, 552, 652, 556, 652, 556, 652, 556, 648, 560, 652, 556, 648, 1660, 652, 556, 648, 560, 648, 560, 648, 556, 652, 556, 648, 560, 648, 560, 648, 560, 648, 560, 648, 560, 648, 560, 624, 580, 640, 568, 624, 1684, 628, 1684, 624, 580, 628, 1684, 624};
const uint16_t rawData_20_H_L[] = {9116, 4400, 744, 464, 716, 488, 712, 1600, 708, 1604, 676, 1660, 648, 556, 652, 556, 652, 556, 652, 556, 652, 556, 648, 1660, 652, 556,
 652, 556, 652, 556, 652, 556, 648, 556, 652, 556, 652, 556, 652, 556, 652, 556, 652, 556, 648, 560, 648, 1660, 652, 556, 648, 560, 648, 560, 628, 576, 628, 580, 628,
  1684, 624, 584, 624, 1684, 624, 584, 624, 584, 624, 1684, 624, 584, 624, 20032, 652, 556, 652, 556, 652, 556, 652, 556, 648, 560, 648, 556, 652, 556, 652, 556, 648, 560, 648, 560, 648, 556, 652, 556, 652, 556, 648, 560, 648, 1660, 652, 556, 652, 556, 648, 560, 644, 564, 624, 584, 624, 584, 624, 584, 624, 580, 628, 580, 624, 584, 624, 584, 624, 584, 624, 580, 628, 580, 624, 1688, 624, 1684, 624, 1688, 624};
const uint16_t rawData_21_H_M[] = {9072, 4404, 732, 472, 736, 472, 728, 1600, 680, 1628, 676, 528, 676, 1636, 672, 532, 676, 528, 676, 1632, 672, 532, 676, 1632, 672, 536,
 672, 556, 648, 556, 652, 532, 672, 556, 652, 556, 652, 552, 652, 556, 648, 556, 652, 556, 652, 552, 652, 1656, 648, 560, 624, 580, 628, 576, 628, 580, 624, 580, 628,
  1680, 624, 584, 624, 1680, 628, 580, 624, 580, 628, 1680, 624, 584, 624, 19980, 676, 532, 672, 532, 676, 532, 672, 532, 676, 532, 676, 528, 676, 532, 672, 532, 676, 532, 676, 552, 652, 556, 648, 556, 652, 556, 648, 556, 652, 1656, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 628, 580, 624, 580, 628, 580, 628, 576, 628, 580, 628, 580, 624, 580, 624, 584, 624, 1680, 628, 1680, 624, 1684, 624, 1684, 624};
const uint16_t rawData_22_H_M[] = {9096, 4404, 736, 472, 732, 472, 732, 1596, 684, 1624, 680, 532, 672, 1632, 676, 528, 676, 532, 676, 528, 676, 1632, 672, 1632, 676, 532,
 676, 528, 676, 532, 672, 536, 672, 544, 660, 532, 676, 532, 672, 556, 648, 556, 652, 556, 652, 552, 652, 1656, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648,
  1660, 648, 556, 628, 1680, 628, 576, 628, 580, 624, 1684, 624, 580, 628, 19980, 676, 556, 672, 532, 676, 532, 672, 532, 676, 532, 672, 532, 672, 536, 672, 532, 672, 532, 676, 532, 676, 532, 672, 556, 648, 556, 652, 556, 648, 1660, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 648, 560, 648, 556, 636, 568, 628, 580, 628, 580, 624, 580, 628, 580, 624, 580, 628, 580, 624, 580, 624, 584, 624, 580, 628};
const uint16_t rawData_23_H_H[] = {9072, 4400, 736, 468, 736, 472, 708, 1620, 684, 1624, 680, 1632, 676, 1632, 672, 532, 672, 532, 664, 1644, 676, 1632, 652, 1656, 652,
 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 576, 628, 580, 624, 580, 628, 1680, 624, 580, 628, 580, 624, 580, 628, 580, 624, 580,
  628, 1680, 624, 580, 628, 1680, 624, 580, 628, 580, 624, 1684, 624, 580, 628, 19980, 672, 536, 668, 536, 672, 532, 676, 532, 672, 532, 652, 556, 648, 556, 656, 552, 648, 560, 648, 556, 648, 560, 648, 556, 652, 556, 644, 560, 652, 1656, 652, 576, 628, 580, 624, 564, 640, 580, 628, 580, 624, 580, 628, 580, 624, 580, 628, 580, 628, 580, 624, 580, 624, 584, 624, 580, 624, 1684, 624, 580, 624, 580, 628, 580, 624};
const uint16_t rawData_20_C_L[] = {9092, 4400, 748, 1564, 716, 488, 716, 492, 708, 1604, 680, 1656, 652, 556, 652, 556, 648, 556, 652, 556, 652, 556, 652, 1660, 652,
 556, 648, 556, 652, 556, 652, 556, 652, 556, 648, 560, 648, 560, 648, 556, 652, 556, 652, 556, 648, 560, 628, 1680, 632, 576, 628, 580, 628, 580, 624, 584, 624,
  580, 628, 1684, 624, 584, 624, 1684, 624, 584, 624, 584, 624, 1684, 624, 584, 624, 20032, 652, 556, 652, 556, 652, 556, 652, 552, 652, 556, 652, 556, 652, 556, 652, 556, 652, 556, 648, 560, 648, 560, 648, 556, 652, 556, 652, 556, 652, 1656, 652, 556, 652, 556, 652, 556, 648, 560, 648, 560, 648, 560, 648, 560, 648, 560, 624, 580, 628, 580, 628, 580, 624, 584, 624, 584, 624, 1684, 628, 1680, 628, 580, 624, 1688, 624};
const uint16_t rawData_19_C_M[] = {9100, 4396, 744, 1560, 720, 488, 712, 492, 708, 1600, 680, 552, 652, 1656, 652, 552, 652, 556, 648, 1656, 652, 1656, 652, 556, 648,
 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 1656, 648, 556, 648, 560, 648, 560, 628, 576, 624,
  584, 624, 1684, 624, 580, 624, 1684, 624, 580, 624, 580, 628, 1680, 624, 584, 624, 19984, 676, 552, 652, 552, 652, 556, 652, 556, 648, 556, 652, 552, 652, 556, 652, 552, 652, 556, 652, 556, 648, 556, 648, 556, 652, 556, 652, 580, 648, 1660, 652, 556, 648, 556, 648, 556, 652, 556, 648, 556, 652, 556, 624, 580, 648, 560, 624, 580, 624, 584, 624, 580, 624, 584, 624, 580, 624, 580, 624, 1684, 624, 584, 624, 1680, 624};
const uint16_t rawData_18_C_H[] = {9072, 4404, 736, 1572, 732, 472, 732, 492, 696, 1612, 680, 1632, 676, 1652, 652, 532, 676, 532, 672, 556, 652, 1656, 648, 556, 652,
 556, 648, 556, 652, 552, 652, 556, 648, 560, 648, 556, 648, 560, 648, 556, 648, 560, 624, 580, 624, 584, 624, 1684, 624, 580, 624, 584, 624, 580, 624, 580, 628,
  580, 624, 1684, 624, 580, 624, 1684, 624, 580, 624, 584, 624, 1684, 624, 580, 624, 19984, 676, 532, 676, 532, 672, 532, 676, 532, 672, 532, 672, 536, 672, 556, 648, 556, 652, 552, 652, 556, 652, 552, 652, 556, 648, 556, 652, 556, 624, 1684, 648, 556, 628, 580, 624, 580, 628, 580, 624, 580, 628, 580, 624, 580, 628, 580, 624, 580, 628, 580, 624, 608, 624, 584, 624, 580, 624, 1684, 624, 580, 628, 580, 624, 1680, 628};
const uint16_t rawData_OFF_C[] = {9112, 4384, 748, 1556, 744, 460, 712, 496, 708, 500, 676, 1656, 652, 552, 652, 556, 648, 556, 652, 556, 648, 556, 652, 1656, 652,
 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 648, 560, 648, 556, 652, 556, 648, 556, 648, 560, 652, 552, 648, 560, 648, 556, 628,
  580, 644, 1660, 628, 580, 624, 1684, 624, 580, 624, 584, 624, 1684, 620, 584, 624, 19984, 676, 552, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 560, 648, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 1660, 648, 556, 648, 556, 652, 556, 648, 556, 652, 556, 648, 556, 648, 560, 648, 556, 624, 584, 624, 580, 648, 560, 624, 580, 624, 584, 624, 1680, 624, 1688, 620, 584, 624, 580, 624};
const uint16_t rawData_OFF_H[] = {9104, 4412, 736, 472, 732, 476, 728, 1600, 684, 524, 680, 1632, 680, 528, 676, 532, 676, 532, 676, 532, 676, 552, 652, 1660, 652,
 556, 652, 552, 656, 552, 652, 556, 652, 556, 652, 556, 652, 556, 648, 556, 652, 556, 652, 556, 652, 556, 648, 560, 648, 556, 652, 556, 652, 556, 648, 560, 648,
  560, 648, 1660, 648, 560, 624, 1684, 628, 580, 624, 584, 624, 1684, 628, 580, 628, 20004, 676, 556, 652, 556, 652, 556, 652, 552, 652, 556, 652, 556, 652, 556, 652, 556, 652, 556, 652, 552, 652, 556, 652, 556, 652, 556, 652, 556, 652, 1660, 652, 556, 648, 556, 652, 556, 652, 556, 652, 556, 648, 560, 648, 560, 648, 560, 648, 556, 628, 580, 628, 580, 628, 580, 628, 580, 624, 584, 624, 1684, 628, 1684, 624, 580, 624};




enum State {MONITORING, COOLING, HEATING};

State currentState = MONITORING;

// Sıcaklık ayarlama fonksiyonu
void setACTemperatureandFanH(int targetTemperature) {       //heating
  IrSender.sendRaw(rawData_ON, sizeof(rawData_ON) / sizeof(rawData_ON[0]), 38);  //ON for 20 low cooling
                   
  delay(1500);

  switch (targetTemperature) {
    case 20:    //20 and low fan heating
      IrSender.sendRaw(rawData_20_H_L, sizeof(rawData_20_H_L) / sizeof(rawData_20_H_L[0]), 38);
      break;
    case 21:    //21 and med fan heating
      IrSender.sendRaw(rawData_21_H_M, sizeof(rawData_21_H_M) / sizeof(rawData_21_H_M[0]), 38);
      break;
    case 22:    //22 and med fan heating
      IrSender.sendRaw(rawData_22_H_M, sizeof(rawData_22_H_M) / sizeof(rawData_22_H_M[0]), 38);
      break;
    case 23:    //23 and high fan heating
      IrSender.sendRaw(rawData_23_H_H, sizeof(rawData_23_H_H) / sizeof(rawData_23_H_H[0]), 38);
      break;
  }
  
}

// Sıcaklık ayarlama fonksiyonu
void setACTemperatureandFanC(int targetTemperature) {       //cooling
  //Serial.println(targetTemperature);
  IrSender.sendRaw(rawData_ON, sizeof(rawData_ON) / sizeof(rawData_ON[0]), 38);  //ON for 20 low cooling
                   
  delay(1500);
  switch (targetTemperature) {
    case 18:
      //Serial.println("is in");
      IrSender.sendRaw(rawData_18_C_H, sizeof(rawData_18_C_H) / sizeof(rawData_18_C_H[0]), 38);     //18 and high fan cooling

      break;
    case 19:
      IrSender.sendRaw(rawData_19_C_M, sizeof(rawData_19_C_M) / sizeof(rawData_19_C_M[0]), 38);     // 19 and med fan cooling
      break; 
    case 20:
      IrSender.sendRaw(rawData_20_C_L, sizeof(rawData_20_C_L) / sizeof(rawData_20_C_L[0]), 38);     //20 and low fan cooling
      break;

  }
      
}
// PID çıktısını sıcaklık ayarına dönüştürme fonksiyonu
int mapOutputToTemperature(double output) {

  switch (currentState) {
    case HEATING:
       

       if (output < 75.0) {
          return 20;  
      } else if (output < 140.0) {
          return 21;  
      } else if (output < 202.5) {
          return 22; 
      } else {
          return 23; 
      }
      break;
    
    case COOLING:
      
       if (output < 95.0) {
          return 20; 
      } else if (output < 155.5) {
          return 19; 
      } else {
          return 18; 
      }
      break;
    default:
      return 20; // Varsayılan değer
    
  }
  
}



void setup() {
    pinMode(LED_BUILTIN, OUTPUT);

    Serial.begin(9600);
#if defined(__AVR_ATmega32U4__) || defined(SERIAL_PORT_USBVIRTUAL) || defined(SERIAL_USB) /*stm32duino*/|| defined(USBCON) /*STM32_stm32*/ \
    || defined(SERIALUSB_PID)  || defined(ARDUINO_ARCH_RP2040) || defined(ARDUINO_attiny3217)
    delay(4000);
#endif


    coolingPID.SetMode(AUTOMATIC);
    heatingPID.SetMode(AUTOMATIC);
    IrSender.begin(3);
}

void loop() {

    int chk = DHT.read22(DHTPIN);
    if (chk == DHTLIB_OK) {
    Input = DHT.temperature;  // Sıcaklık verisini Input olarak al
    Serial.println(Input);
  } else {
    delay(2000);

    return;
  }

    switch (currentState) {
        case MONITORING:

            if (Input >= 20.7) {                  
                  currentState = COOLING;
            }
             else if (Input <= 19.2) {
                  currentState = HEATING;
                }
        break;    
            

        case COOLING:
            
            coolingPID.Compute();
            
            int targetTemperature = mapOutputToTemperature(coolingOutput);
            setACTemperatureandFanC(targetTemperature);
            
            



            if (Input <= 20.0) {

                    IrSender.sendRaw(rawData_OFF_C, sizeof(rawData_OFF_C) / sizeof(rawData_OFF_C[0]), 38);  //off for 20 cooling lowfan
                    currentState = MONITORING;
            }
            
            break;

        case HEATING:
            heatingPID.Compute();
            targetTemperature = mapOutputToTemperature(heatingOutput);
                setACTemperatureandFanH(targetTemperature);
                    IrSender.sendRaw(rawData_OFF_H, sizeof(rawData_OFF_H) / sizeof(rawData_OFF_H[0]), 38);   //off for 20 heating lowfan
                    currentState = MONITORING;
            break;
    
    }

    delay(5000);
}
